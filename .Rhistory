beta[1:2] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
traceback()
null.model<-Matrix(nrow = 1,ncol=p,data=0,sparse = T)
null.margin<-prior.dist(null.model)
prior.dist<-function(t){
dim.model<-length(which(t==1))
result<-dim.model*log(lambda)-lambda+lfactorial(p-dim.model)-lfactorial(p)
return(result)
}
null.margin<-prior.dist(null.model)
lambda=1
null.margin<-prior.dist(null.model)
null.margin
null.model
lambda.list
ld.list
z.list
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
prior.dist<-function(t){
dim.model<-sum(t)
result<-dim.model*log(lambda)-lambda+lfactorial(p-dim.model)-lfactorial(p)
return(result)
}
null.margin<-prior.dist(null.model)
null.margin
prior.dist<-function(t){
dim.model<-sum(t)
result<-dim.model*log(lambda)-lambda+lfactorial(p-dim.model)-lfactorial(p)
return(result)
}
set.gamma.func<-function(S){
add.function<-function(y){results<-(apply(as.matrix(S_sub),1,function(x){return(sort(c(x,y)))}))
return(t(results))
}
set.gamma<-list()
for(i in 1:3){
set.gamma[[i]]<-c()
}
#set of gamma-
if(length(S)==0){
S_sub<-(1:p)
set.gamma[[1]]<-c()
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(c(x,S))})
set.gamma[[2]]<-as.matrix(set.gamma[[2]])
set.gamma[[3]]<-c()
}
if(length(S)>1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
if(length(S)>2){
set.gamma[[1]]<-t(apply(as.matrix(set.gamma[[1]]),1,sort))
}
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
#set of gamma=
set.gamma[[3]]<-add.function(set.gamma[[1]][1,])
for(i in 2:nrow(set.gamma[[1]])){
set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
}
}
if(length(S)==1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
#set of gamma=
set.gamma[[3]]<-t(add.function(set.gamma[[1]][1,]))
}
return(set.gamma)
}
a<-set.gamma.func(100)
index.fun<-function(x){
m<-as(matrix(0,nrow=nrow(x),ncol=p),'dgTMatrix')
m@i<-as.integer(rep(1:nrow(x)-1,each=ncol(x)))
m@j<-as.integer(c(t(x))-1)
m@x=rep(1,nrow(x)*ncol(x))
m<-as(m,"dgCMatrix")
return(m)
}
i=2
matrix.gamma[[i]]<-index.fun(set.gamma[[i]])
matrix.gamma[[i]]<-index.fun(a[[i]])
matrix.gamma<-list()
matrix.gamma[[i]]<-index.fun(a[[i]])
apply(matrix.gamma[[i]],1,prior.dist)
prior.dist
a<-set.gamma.func(c(100,200))
matrix.gamma<-list()
matrix.gamma[[i]]<-index.fun(a[[i]])
apply(matrix.gamma[[i]],1,prior.dist)
library(CARMA)
set.seed(1)
n = 1000
p = 1000
beta = rep(0,p)
beta[1:2] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'hyper-g')
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
lambda.list[[1]]<-1/sqrt(1000)
lambda.list
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
n = 800
p = 1000
beta = rep(0,p)
beta[1:2] = 1
set.seed(1)
n = 800
p = 1000
beta = rep(0,p)
beta[1:2] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1/sqrt(1000)
library(MASS)
library(Matrix)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
beta[1:1] = 1
n = 800
p = 1000
beta = rep(0,p)
beta[1:1] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1/sqrt(1000)
library(MASS)
library(Matrix)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
n = 1000
p = 1000
beta = rep(0,p)
beta[1:2] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1/sqrt(1000)
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
lambda.list[[1]]<-1
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
lambda.list
beta
plot(z.list[[1]])
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
plot(CARMA.result[[1]]$PIPs)
matrix.gamma[[i]]<-index.fun(a[[i]])
set.gamma.func<-function(input.S,condition.index=NULL){
set.gamma.func.base<-function(S){
add.function<-function(y){results<-(apply(as.matrix(S_sub),1,function(x){return(sort(c(x,y)))}))
return(t(results))
}
set.gamma<-list()
for(i in 1:3){
set.gamma[[i]]<-c()
}
#set of gamma-
if(length(S)==0){
S_sub<-(1:p)
set.gamma[[1]]<-c()
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(c(x,S))})
set.gamma[[2]]<-as.matrix(set.gamma[[2]])
set.gamma[[3]]<-c()
}
if(length(S)>1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
if(length(S)>2){
set.gamma[[1]]<-t(apply(as.matrix(set.gamma[[1]]),1,sort))
}
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
#set of gamma=
set.gamma[[3]]<-add.function(set.gamma[[1]][1,])
for(i in 2:nrow(set.gamma[[1]])){
set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
}
}
if(length(S)==1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
#set of gamma=
set.gamma[[3]]<-t(add.function(set.gamma[[1]][1,]))
}
return(set.gamma)
}
set.gamma.func.conditional<-function(input.S,condition.index){
add.function<-function(y){results<-(apply(as.matrix(S_sub),1,function(x){return(sort(c(x,y)))}))
return(t(results))
}
set.gamma<-list()
for(i in 1:3){
set.gamma[[i]]<-c()
}
#   p=100;input.S=c(20,21,22,30,40);conditional.S=c(40,30);
#condition.index=conditional.S
S=input.S[-match(condition.index,input.S)]
#set of gamma-
if(length(S)==0){
S=integer(0)
S_sub<-(1:p)[-condition.index]
set.gamma[[1]]<-c()
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(c(x,S))})
#  add.matrix<-matrix(rep(condition.index,length(set.gamma[[2]])),ncol=length(condition.index),byrow = T)
set.gamma[[2]]<-as.matrix(set.gamma[[2]])
set.gamma[[3]]<-c()
}
if(length(S)==1){
S_sub<-(1:p)[-input.S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
# add.matrix<-matrix(rep(condition.index,ncol(set.gamma[[2]])),ncol=length(condition.index),byrow = T)
#  set.gamma[[2]]<-as.matrix(cbind(t(set.gamma[[2]]),add.matrix))
set.gamma[[2]]<-as.matrix((t(set.gamma[[2]])))
#set of gamma=
set.gamma[[3]]<-t(add.function(set.gamma[[1]][1,]))
#set.gamma[[3]]<-as.matrix(cbind(set.gamma[[3]],matrix(rep(condition.index,nrow(set.gamma[[3]])),ncol=length(condition.index),byrow = T)))
}
if(length(S)>1){
S_sub<-(1:p)[-input.S]
if(length(S)>2){
set.gamma[[1]]<-t(combn(S,length(S)-1))
set.gamma[[1]]<-t(apply(as.matrix(set.gamma[[1]]),1,sort))
#     set.gamma[[1]]<-as.matrix(cbind(set.gamma[[1]],matrix(rep(condition.index,nrow(set.gamma[[1]])),ncol=length(condition.index),byrow = T)))
}else{
set.gamma[[1]]<-t(combn(S,length(S)-1))
#    set.gamma[[1]]<-as.matrix(cbind(set.gamma[[1]],matrix(rep(condition.index,nrow(set.gamma[[1]])),ncol=length(condition.index),byrow = T)))
}
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
#add.matrix<-matrix(rep(condition.index,ncol(set.gamma[[2]])),ncol=length(condition.index),byrow = T)
set.gamma[[2]]<-as.matrix(t(set.gamma[[2]]))
#set of gamma=
set.gamma[[3]]<-add.function(set.gamma[[1]][1,])
factorial(3)
for(i in 2:nrow(set.gamma[[1]])){
set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
}
}
return(set.gamma)
}
if(is.null(condition.index)){
results<-set.gamma.func.base(input.S)
}else{
results<-set.gamma.func.conditional(input.S,condition.index)
}
return(results)
}
duplicated.dgCMatrix <- function (dgCMat, MARGIN) {
MARGIN <- as.integer(MARGIN)
n <- nrow(dgCMat)
p <- ncol(dgCMat)
J <- rep(1:p, diff(dgCMat@p))
I <- dgCMat@i + 1
x <- dgCMat@x
if (MARGIN == 1L) {
## check duplicated rows
names(x) <- J
RowLst <- split(x, I)
is_empty <- setdiff(1:n, I)
result <- duplicated.default(RowLst)
} else if (MARGIN == 2L) {
## check duplicated columns
names(x) <- I
ColLst <- split(x, J)
is_empty <- setdiff(1:p, J)
result <- duplicated.default(ColLst)
} else {
warning("invalid MARGIN; return NULL")
result <- NULL
}
if(any(is_empty)){
out <- logical(if(MARGIN == 1L) n else p)
out[-is_empty] <- result
if(length(is_empty) > 1)
out[is_empty[-1]] <- TRUE
result <- out
}
result
}
match.dgCMatrix <- function (dgCMat1,dgCMat2) {
#  dgCMat1=B.list[[2]]
# dgCMat2=add.B[[2]]
n1 <- nrow(dgCMat1)
p1 <- ncol(dgCMat1)
J1 <- rep(1:p1, diff(dgCMat1@p))
I1 <- dgCMat1@i + 1
x1 <- dgCMat1@x
n2 <- nrow(dgCMat2)
p2 <- ncol(dgCMat2)
J2 <- rep(1:p2, diff(dgCMat2@p))
I2 <- dgCMat2@i + 1
x2 <- dgCMat2@x
## check duplicated rows
names(x1) <- J1
RowLst1 <- split(J1, I1)
is_empty1<- setdiff(1:n1, I1)
## check duplicated rows
names(x2) <- J2
RowLst2 <- split(J2, I2)
is_empty2 <- setdiff(1:n2, I2)
result<-(match(RowLst2,RowLst1))
if(any(which(result>is_empty1))){
result[which(result>=is_empty1)]=result[which(result>=is_empty1)]+1
}
if(any(is_empty1)){
if(any(is_empty2)){
result<-c(is_empty1,result)
}
}else{
if(any(is_empty2)){
result<-c(NA,result)
}
}
return(result)
}
PIP.func<-function(likeli,model.space){
infi.index<-which(is.infinite(likeli))
if(length(infi.index)!=0){
likeli<-likeli[-infi.index]
model.space<-model.space[-infi.index,]
}
aa<-likeli-max(likeli,na.rm=T)
prob.sum<-sum(exp(aa))
result.prob<-rep(NA,p)
for(i in 1:p){
result.prob[i]<-sum(exp(aa[ which(model.space[,i]==1)]))/prob.sum
}
return(result.prob)
}
index.fun.inner<-function(x){
#     print(nrow(x));print(p)
m<-as(matrix(0,nrow=nrow(x),ncol=p),'dgTMatrix')
m@i<-as.integer(rep(1:nrow(x)-1,each=ncol(x)))
m@j<-as.integer(c(t(x))-1)
m@x=rep(1,nrow(x)*ncol(x))
m<-as(m,"dgCMatrix")
return(m)
}
a<-set.gamma.func(c(100,200))
i=2
matrix.gamma<-list()
matrix.gamma[[i]]<-index.fun(a[[i]])
index.fun<-function(outer.x,num.bins=10){
#   print(dim(outer.x))
if(nrow(outer.x)>1000){
index.bins<-which((1:nrow(outer.x))%%floor(nrow(outer.x)/num.bins)==0)
#print(index.bins)
result.m<-index.fun.inner(outer.x[1:index.bins[1],,drop=F])
for(b in 1:(length(index.bins)-1)){
result.m<-rbind(result.m,index.fun.inner(outer.x[(index.bins[b]+1):index.bins[b+1],,drop=F]))
}
if(index.bins[length(index.bins)]!=nrow(outer.x)){
result.m<-rbind(result.m,index.fun.inner(outer.x[(index.bins[length(index.bins)]+1):nrow(outer.x),,drop=F]))
}
}else{
result.m<-index.fun.inner(outer.x)
}
return(result.m)
}
matrix.gamma[[i]]<-index.fun(a[[i]])
apply(matrix.gamma[[i]],1,prior.dist)
matrix.gamma
length(which(matrix.gamma[[2]]==1))
length(which(matrix.gamma[[2]][1,]==1))
sum(matrix.gamma[[2]][1,])
set.seed(1)
n = 1000
p = 1000
beta = rep(0,p)
beta[1:2] = 1
X = matrix(rnorm(n*p),nrow = n,ncol = p)
X = scale(X,center = TRUE,scale = TRUE)
y = drop(X %*% beta + rnorm(n))
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
ld.list<-list()
ld.list[[1]]<-cov(X)
lambda.list<-list()
lambda.list[[1]]<-1
library(MASS)
library(Matrix)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list)
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
y = scale(y)
SS=compute_summary_statistics(X,y)
z.list<-list()
z.list[[1]]<-(SS$betahat/SS$sebetahat)
plot(z.list[[1]])
z<-read.table('/Users/zikunyang/Dropbox/Prior_info/FINEMAPPING/Package/data/chr8_127424659_130041931',header=T)
ld<-read.table('/Users/zikunyang/Dropbox/Prior_info/FINEMAPPING/Package/data/chr8_127424659_130041931.ld')
z.list<-list()
z.list[[1]]<-(z$Zscore)
ld.list<-list()
ld.list[[1]]<-as.matrix(ld)
lambda.list<-list()
lambda.list[[1]]<-sqrt(1/nrow(ld.list[[1]]))
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
plot(CARMA.result[[1]]$PIPs)
z<-read.table('/Users/zikunyang/Dropbox/Prior_info/FINEMAPPING/Package/p_chr16_1',header=T)
ld<-read.table('/Users/zikunyang/Dropbox/Prior_info/FINEMAPPING/Package/p_chr16_1.ld')
z.list<-list()
z.list[[1]]<-(z$Zscore)
ld.list<-list()
ld.list[[1]]<-as.matrix(ld)
lambda.list<-list()
lambda.list[[1]]<-sqrt(1/nrow(ld.list[[1]]))
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Cauchy')
plot(CARMA.result[[1]]$PIPs)
CARMA.result<-CARMA_fixed_sigma(z.list,ld.list=ld.list,lambda.list = lambda.list,effect.size.prior = 'Hyper-g')
plot(CARMA.result[[1]]$PIPs)
labels='homo'
ref.table<-read.csv('/Users/zikunyang/Downloads/clean/ref_table.csv')
library(CARMA)
library("devtools")
library(roxygen2)
library("devtools")
library(roxygen2)
#install.packages("devtools")
#devtools::install_github("klutometis/roxygen")
rm(list=ls())
# install.packages('Rcpp')
# install.packages('RcppArmadillo')
#install.packages('RcppGSL')
#install.packages('roxygen2')
library("devtools")
library(roxygen2)
library(Rcpp)
#install.packages("pkgKitten")
library(RcppArmadillo)
library(tools)
library(RcppGSL)
install_github("ZikunY/CARMA")
setwd('/Users/zikunyang/Documents/GitHub/CARMA')
build_manual()
install_github("ZikunY/CARMA")
library(CARMA)
?CARMA_fixed_sigma
